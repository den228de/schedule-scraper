// Telegram Web App JavaScript
class ScheduleApp {
    constructor() {
        this.init();
    }

    init() {
        this.setupTelegramTheme();
        this.loadSchedule();
        this.setupEventListeners();
    }

    setupTelegramTheme() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram
        if (window.Telegram && window.Telegram.WebApp) {
            const tg = window.Telegram.WebApp;
            tg.ready();
            tg.expand();
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É Telegram
            document.documentElement.style.setProperty('--tg-theme-bg-color', tg.themeParams.bg_color || '#ffffff');
            document.documentElement.style.setProperty('--tg-theme-text-color', tg.themeParams.text_color || '#1a1a1a');
            document.documentElement.style.setProperty('--tg-theme-hint-color', tg.themeParams.hint_color || '#999999');
            document.documentElement.style.setProperty('--tg-theme-link-color', tg.themeParams.link_color || '#2481cc');
            document.documentElement.style.setProperty('--tg-theme-button-color', tg.themeParams.button_color || '#2481cc');
            document.documentElement.style.setProperty('--tg-theme-button-text-color', tg.themeParams.button_text_color || '#ffffff');
            document.documentElement.style.setProperty('--tg-theme-secondary-bg-color', tg.themeParams.secondary_bg_color || '#f8f9fa');
        }
    }

    async loadSchedule() {
        try {
            this.showLoading();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...');
            
            const response = await fetch('/api/versions');
            console.log('Response status:', response.status);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const versions = await response.json();
            console.log('–ü–æ–ª—É—á–µ–Ω—ã –≤–µ—Ä—Å–∏–∏:', versions);
            
            if (versions.length > 0) {
                // –ò—â–µ–º –≤–µ—Ä—Å–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏ (–Ω–µ –ø—É—Å—Ç—É—é)
                let versionToUse = null;
                for (let i = 0; i < versions.length; i++) {
                    const version = versions[i];
                    console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é ${version.id}:`, version);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏
                    const scheduleResponse = await fetch(`/api/schedule/${version.id}`);
                    if (scheduleResponse.ok) {
                        const scheduleData = await scheduleResponse.json();
                        if (scheduleData && scheduleData.length > 0) {
                            versionToUse = version;
                            console.log('–ù–∞–π–¥–µ–Ω–∞ –≤–µ—Ä—Å–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏:', versionToUse);
                            this.renderSchedule(scheduleData, version.week_start);
                            break;
                        }
                    }
                }
                
                if (!versionToUse) {
                    this.showEmptyState();
                }
            } else {
                this.showEmptyState();
            }
        } catch (error) {
            console.error('Error loading schedule:', error);
            this.showError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: ${error.message}`);
        }
    }

    renderSchedule(scheduleData, weekStart) {
        const container = document.querySelector('.schedule-container');
        container.innerHTML = '';

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ –¥–Ω—è–º
        const days = this.groupByDays(scheduleData);
        
        if (Object.keys(days).length === 0) {
            this.showEmptyState();
            return;
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –¥–∞—Ç–µ
        const sortedDays = Object.keys(days).sort((a, b) => {
            const dateA = this.parseDate(a);
            const dateB = this.parseDate(b);
            return dateA - dateB;
        });

        sortedDays.forEach(dateStr => {
            const dayCard = this.createDayCard(dateStr, days[dateStr]);
            container.appendChild(dayCard);
        });

        this.hideLoading();
    }

        groupByDays(scheduleData) {
        const days = {};
        
        scheduleData.forEach(item => {
            const subject = item.subject || '';
            const dateMatch = subject.match(/(\d{2}\.\d{2}\.\d{4})/);
            
            if (dateMatch) {
                const dateStr = dateMatch[1];
                if (!days[dateStr]) {
                    days[dateStr] = [];
                }
                days[dateStr].push(item);
            }
        });
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—ã –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –ø–æ –Ω–æ–º–µ—Ä—É –ø–∞—Ä—ã
        Object.keys(days).forEach(dateStr => {
            days[dateStr].sort((a, b) => {
                const pairA = a.pair || 0;
                const pairB = b.pair || 0;
                return pairA - pairB;
            });
        });
        
        return days;
    }

    createDayCard(dateStr, lessons) {
        const dayCard = document.createElement('div');
        dayCard.className = 'day-card';
        
        const dateObj = this.parseDate(dateStr);
        const weekday = this.getWeekdayName(dateObj);
        
        dayCard.innerHTML = `
            <div class="day-header">
                <div class="day-title">${weekday}</div>
                <div class="day-date">${this.formatDate(dateStr)}</div>
            </div>
            <div class="lessons">
                ${lessons.map((lesson, index) => this.createLessonItem(lesson, index + 1)).join('')}
            </div>
        `;
        
        return dayCard;
    }

    createLessonItem(lesson, number) {
        const time = lesson.time || '';
        const subject = lesson.subject || '';
        const room = lesson.room || '';
        const kind = lesson.kind || '';
        const pair = lesson.pair || number;
        const teacher = lesson.teacher || '';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è –ø–æ –ø–æ–ª—é kind
        let lessonType = '';
        if (kind === '–õ–µ–∫—Ü–∏—è') {
            lessonType = '–õ–µ–∫—Ü–∏—è';
        } else if (kind === '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è') {
            lessonType = '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è';
        } else if (kind === '–°–µ–º–∏–Ω–∞—Ä') {
            lessonType = '–°–µ–º–∏–Ω–∞—Ä';
        } else if (kind === '–ó–∞—á–µ—Ç') {
            lessonType = '–ó–∞—á–µ—Ç';
        } else {
            lessonType = '–ü—Ä–∞–∫—Ç–∏–∫–∞';
        }
        
        // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ - —É–±–∏—Ä–∞–µ–º –¥–∞—Ç—É, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ò —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è
        let cleanSubject = subject;
        // –£–±–∏—Ä–∞–µ–º –¥–∞—Ç—É –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ –Ω–∞—á–∞–ª–∞
        cleanSubject = cleanSubject.replace(/^\d{2}\.\d{2}\.\d{4}\s+[–ê-–Ø–∞-—è]+-\d+\s*\|\s*/, '');
        // –£–±–∏—Ä–∞–µ–º —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è –≤ —Å–∫–æ–±–∫–∞—Ö –≤ –∫–æ–Ω—Ü–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "(–õ–µ–∫—Ü–∏—è)", "(–ü—Ä–∞–∫—Ç–∏—á.)")
        cleanSubject = cleanSubject.replace(/\s*\([^)]+\)\s*$/, '');
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏–∫–æ–Ω–∫–∏ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è
        const typeIconClass = lessonType === '–ü—Ä–∞–∫—Ç–∏–∫–∞' ? 'icon-type practice' : 'icon-type';
        
        return `
            <div class="lesson-item">
                <div class="lesson-content">
                    <div class="lesson-header">
                        <div class="lesson-subject">${cleanSubject}</div>
                        <div class="lesson-time">${time}</div>
                    </div>
                    <div class="lesson-details">
                        ${room ? `<div class="lesson-detail"><span class="icon-room"></span> ${room}</div>` : ''}
                        ${lessonType ? `<div class="lesson-detail"><span class="${typeIconClass}"></span> ${lessonType}</div>` : ''}
                        ${teacher ? `<div class="lesson-detail"><span class="icon-teacher"></span> ${teacher}</div>` : ''}
                        <div class="lesson-detail"><span class="icon-pair"></span> –ü–∞—Ä–∞ ${pair}</div>
                    </div>
                </div>
            </div>
        `;
    }

    parseDate(dateStr) {
        const [day, month, year] = dateStr.split('.');
        return new Date(year, month - 1, day);
    }

    getWeekdayName(date) {
        const weekdays = [
            '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', 
            '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'
        ];
        return weekdays[date.getDay()];
    }
    
    formatDate(dateStr) {
        const [day, month, year] = dateStr.split('.');
        const months = [
            '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
            '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
        ];
        return `${day} ${months[parseInt(month) - 1]} ${year}`;
    }

    showLoading() {
        const container = document.querySelector('.schedule-container');
        container.innerHTML = `
            <div class="loading">
                <div class="spinner"></div>
                <div>–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...</div>
            </div>
        `;
    }

    hideLoading() {
        const loading = document.querySelector('.loading');
        if (loading) {
            loading.remove();
        }
    }

    showEmptyState() {
        const container = document.querySelector('.schedule-container');
        container.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üìã</div>
                <h3>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ</h3>
                <p>–û–∂–∏–¥–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –ø—Ä–æ–≥–æ–Ω —Å–∫—Ä–∞–ø–µ—Ä–∞</p>
            </div>
        `;
    }

    showError(message) {
        const container = document.querySelector('.schedule-container');
        container.innerHTML = `
            <div class="empty-state">
                <div>‚ùå</div>
                <h3>–û—à–∏–±–∫–∞</h3>
                <p>${message}</p>
            </div>
        `;
    }

    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const refreshBtn = document.querySelector('.fab-button');
        if (refreshBtn) {
            refreshBtn.addEventListener('click', () => {
                this.loadSchedule();
            });
        }

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
        this.animateCards();
    }

    animateCards() {
        const cards = document.querySelectorAll('.day-card');
        cards.forEach((card, index) => {
            card.style.opacity = '0';
            card.style.transform = 'translateY(20px)';
            
            setTimeout(() => {
                card.style.transition = 'all 0.5s ease';
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
            }, index * 100);
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    new ScheduleApp();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', (event) => {
    console.error('Global error:', event.error);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
window.addEventListener('unhandledrejection', (event) => {
    console.error('Unhandled promise rejection:', event.reason);
});
