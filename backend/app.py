# backend/app.py
import os, asyncio
from fastapi import FastAPI
from fastapi.responses import JSONResponse, HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from db import init_db, list_versions
try:
    from diff import check_and_store
except ImportError as e:
    print(f"Warning: diff module import failed: {e}")
    # Fallback —Ñ—É–Ω–∫—Ü–∏—è
    async def check_and_store(group_code: str, url: str):
        print(f"DIFF CHECK: {group_code} - {url}")
        return None
try:
    from notifier import notify_admin, close as bot_close
except ImportError:
    # Fallback –µ—Å–ª–∏ notifier –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    async def notify_admin(text: str):
        print(f"NOTIFICATION: {text}")
    async def bot_close():
        pass

GROUP_CODE = os.getenv("GROUP_CODE", "cg389")
GROUP_URL  = os.getenv("GROUP_PAGE_URL", "https://biik.ru/rasp/cg389.htm")

app = FastAPI(title="BIiK Timetable Scraper")

# –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory="static"), name="static")

@app.on_event("startup")
async def on_startup():
    init_db()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç –≤ —Ñ–æ–Ω–µ
    try:
        from notifier import start_bot
        asyncio.create_task(start_bot())
        print("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω: {e}")
    
    # –ü–µ—Ä–≤–∏—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ, –µ—Å–ª–∏ –ë–î –ø—É—Å—Ç–∞—è
    try:
        items = list_versions(GROUP_CODE, 1)
        if not items:
            print("üîÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞—è, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥...")
            await run_job()
        else:
            print(f"‚úÖ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –µ—Å—Ç—å {len(items)} –≤–µ—Ä—Å–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î: {e}")
        print("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥...")
        await run_job()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    sched = AsyncIOScheduler(timezone=os.getenv("TZ","Asia/Irkutsk"))
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç
    sched.add_job(run_job, 'interval', minutes=20, id='schedule_check')
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–≤–∞ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å: 06:30 –∏ 18:30
    for h in (6, 18):
        sched.add_job(run_job, CronTrigger(hour=h, minute=30), id=f'schedule_daily_{h}')
    
    sched.start()
    print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω: –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç + 06:30 –∏ 18:30")

async def run_job():
    try:
        print(f"üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è {GROUP_CODE}...")
        diff = check_and_store(GROUP_CODE, GROUP_URL)
        
        if diff:
            print(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è: –Ω–µ–¥–µ–ª—è {diff.get('week', 'N/A')}, –∑–∞–ø–∏—Å–µ–π: {diff.get('count', 0)}")
            await notify_admin(f"üóì –û–±–Ω–æ–≤–∏–ª–æ—Å—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ {GROUP_CODE} (–Ω–µ–¥–µ–ª—è {diff.get('week', 'N/A')}), –∑–∞–ø–∏—Å–µ–π: {diff.get('count', 0)}\n{GROUP_URL}")
        else:
            print("‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}"
        print(error_msg)
        try:
            await notify_admin(error_msg)
        except Exception as notify_error:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {notify_error}")

@app.get("/api/versions")
def api_versions():
    return JSONResponse([{
        "id": v.id, "week": v.week_start, "created_at": v.created_at.isoformat()
    } for v in list_versions(GROUP_CODE, 20)])

@app.get("/api/schedule/{version_id}")
def api_schedule(version_id: int):
    try:
        from db import list_versions
        items = list_versions(GROUP_CODE, 1)
        if items and items[0].id == version_id:
            from json import loads
            schedule_data = loads(items[0].payload)
            return JSONResponse(schedule_data)
        else:
            return JSONResponse({"error": "–í–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}, status_code=404)
    except Exception as e:
        return JSONResponse({"error": str(e)}, status_code=500)

@app.post("/api/force-update")
async def force_update():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    try:
        print("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
        await run_job()
        return JSONResponse({"status": "success", "message": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ"})
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}"
        print(f"‚ùå {error_msg}")
        return JSONResponse({"status": "error", "message": error_msg}, status_code=500)

@app.get("/api/status")
def api_status():
    """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    try:
        from db import list_versions
        items = list_versions(GROUP_CODE, 1)
        
        if items:
            latest = items[0]
            from json import loads
            schedule_data = loads(latest.payload)
            return JSONResponse({
                "status": "running",
                "last_update": latest.created_at.isoformat(),
                "week": latest.week_start,
                "records_count": len(schedule_data),
                "group": GROUP_CODE
            })
        else:
            return JSONResponse({
                "status": "no_data",
                "message": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞—è",
                "group": GROUP_CODE
            })
    except Exception as e:
        return JSONResponse({
            "status": "error",
            "message": str(e),
            "group": GROUP_CODE
        }, status_code=500)

@app.get("/")
def web_home():
    html = """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ BIiK - CG389</title>
        <link rel="stylesheet" href="/static/style.css">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
        <meta name="format-detection" content="telephone=no">
        <meta name="apple-mobile-web-app-capable" content="yes">
        <meta name="apple-mobile-web-app-status-bar-style" content="default">
        <meta name="apple-mobile-web-app-title" content="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ BIiK">
        <meta name="mobile-web-app-capable" content="yes">
        <meta name="msapplication-TileColor" content="#2481cc">
        <meta name="theme-color" content="#2481cc">
    </head>
    <body>
        <div class="header">
            <h1>üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ BIiK</h1>
            <div class="subtitle">–ì—Ä—É–ø–ø–∞ CG389</div>
        </div>
        
        <div class="schedule-container">
            <div class="loading">
                <div class="spinner"></div>
                <div>–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...</div>
            </div>
        </div>
        
        <button class="fab-button" title="–û–±–Ω–æ–≤–∏—Ç—å">üîÑ</button>
        
        <script src="https://telegram.org/js/telegram-web-app.js"></script>
        <script src="/static/app.js"></script>
    </body>
    </html>
    """
    return HTMLResponse(html)

@app.on_event("shutdown")
async def on_shutdown():
    await bot_close()
