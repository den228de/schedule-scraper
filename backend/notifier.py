# backend/notifier.py
import os, asyncio, re
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from typing import Optional
import asyncio

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_CHAT_ID_RAW = os.getenv("TELEGRAM_ADMIN_ID", "")
ADMIN_CHAT_IDS = []
if ADMIN_CHAT_ID_RAW.strip():
    try:
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
        ADMIN_CHAT_IDS = [int(id_str.strip()) for id_str in ADMIN_CHAT_ID_RAW.split(',') if id_str.strip()]
    except ValueError:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ TELEGRAM_ADMIN_ID: {ADMIN_CHAT_ID_RAW}")
        ADMIN_CHAT_IDS = []

# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
ADMIN_CHAT_ID = ADMIN_CHAT_IDS[0] if ADMIN_CHAT_IDS else 0
GROUP_CODE = os.getenv("GROUP_CODE", "cg389")

def format_lesson_output(subject_name: str, lesson_type: str, room: str, teacher: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—ã–≤–æ–¥ –∑–∞–Ω—è—Ç–∏—è —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º"""
    details = []
    # –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏—é (room —Ç–µ–ø–µ—Ä—å —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –≤ scraper.py)
    if room:
        details.append(f"üìç *{room}*")
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    if teacher:
        details.append(f"üë®‚Äçüè´ *{teacher}*")
    
    if details:
        return f"*{subject_name}* *({lesson_type})* | {' | '.join(details)}"
    else:
        return f"*{subject_name}* *({lesson_type})*"

bot = Bot(token=BOT_TOKEN) if BOT_TOKEN else None
dp = Dispatcher()

# ---- Rate limit helpers ----
def _is_private_chat(message: Message) -> bool:
    chat = message.chat
    return chat and getattr(chat, 'type', '') == 'private'

async def _check_and_increment_limit(message: Message, limit: int = 3) -> bool:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—É (–ª–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω)."""
    if _is_private_chat(message):
        return True
    try:
        from datetime import datetime
        from db import get_user_daily_count, increment_user_daily_count
        chat_id = int(message.chat.id)
        user_id = int(message.from_user.id) if message.from_user else 0
        today = datetime.utcnow().strftime('%Y-%m-%d')
        current = get_user_daily_count(chat_id, user_id, today)
        if current >= limit:
            return False
        increment_user_daily_count(chat_id, user_id, today)
        return True
    except Exception as e:
        print(f"RateLimit check error: {e}")
        return True

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    if not bot:
        await message.answer("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TELEGRAM_BOT_TOKEN")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Web App
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üì± –û–¢–ö–†–´–¢–¨ –†–ê–°–ü–ò–°–ê–ù–ò–ï", 
            web_app={"url": "https://anf1project.ru/schedule"}
        )]
    ])
    
    await message.answer(
        "üöÄ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è BIiK.\n\n"
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/schedule - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "/status - –°—Ç–∞—Ç—É—Å —Å–∫—Ä–∞–ø–µ—Ä–∞\n"
        "/help - –ü–æ–º–æ—â—å\n\n"
        "üí° –ò–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞!",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule
@dp.message(Command("schedule"))
async def cmd_schedule(message: Message):
    allowed = await _check_and_increment_limit(message, limit=3)
    if not allowed:
        await message.reply("‚è≥ –õ–∏–º–∏—Ç 3 –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å—É—Ç–∫–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–∫—É ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.")
        return
    try:
        from db import list_versions
        from datetime import datetime, timedelta
        items = list_versions(GROUP_CODE, 1)
        if items:
            from json import loads
            data = loads(items[0].payload)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            now = datetime.now()
            current_hour = now.hour
            
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ 18:00 - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≤—Ç—Ä–∞
            if current_hour >= 18:
                target_date = now + timedelta(days=1)
                date_text = "–∑–∞–≤—Ç—Ä–∞"
            else:
                target_date = now
                date_text = "—Å–µ–≥–æ–¥–Ω—è"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –ø–æ–∏—Å–∫–∞
            target_date_str = target_date.strftime('%d.%m.%Y')
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
            from collections import defaultdict
            days = defaultdict(list)
            
            for item in data:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ –ø—Ä–µ–¥–º–µ—Ç–∞
                subject = item.get('subject', '')
                date_match = re.search(r'(\d{2}\.\d{2}\.\d{4})', subject)
                if date_match:
                    date_str = date_match.group(1)
                    days[date_str].append(item)
            
            # –ò—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å
            if target_date_str in days:
                schedule_items = days[target_date_str]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                try:
                    date_obj = datetime.strptime(target_date_str, '%d.%m.%Y')
                    weekday = date_obj.strftime('%A').upper()
                    weekday_ru = {
                        'MONDAY': '–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö',
                        'TUESDAY': '–í–¢–û–†–ù–ò–ö', 
                        'WEDNESDAY': '–°–†–ï–î–ê',
                        'THURSDAY': '–ß–ï–¢–í–ï–†–ì',
                        'FRIDAY': '–ü–Ø–¢–ù–ò–¶–ê',
                        'SATURDAY': '–°–£–ë–ë–û–¢–ê',
                        'SUNDAY': '–í–û–°–ö–†–ï–°–ï–ù–¨–ï'
                    }.get(weekday, weekday)
                    
                    schedule_text = f"üìÖ –†–ê–°–ü–ò–°–ê–ù–ò–ï –ù–ê {date_text.upper()} ({target_date_str})\n"
                    schedule_text += f"üóì {weekday_ru}\n\n"
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ –Ω–æ–º–µ—Ä—É
                    sorted_items = sorted(schedule_items, key=lambda x: x.get('pair', 0))
                    
                    for item in sorted_items:
                        time = item.get('time', '')
                        subject = item.get('subject', '')
                        room = item.get('room', '')
                        kind = item.get('kind', '')
                        pair = item.get('pair', '')
                        teacher = ''
                        lesson_type = ''
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è –ø–æ –ø–æ–ª—é kind
                        if kind == '–õ–µ–∫—Ü–∏—è':
                            lesson_type = '–õ–µ–∫—Ü–∏—è'
                        elif kind == '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è':
                            lesson_type = '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è'
                        elif kind == '–°–µ–º–∏–Ω–∞—Ä':
                            lesson_type = '–°–µ–º–∏–Ω–∞—Ä'
                        elif kind == '–ó–∞—á–µ—Ç':
                            lesson_type = '–ó–∞—á–µ—Ç'
                        else:
                            # –ï—Å–ª–∏ kind –ø—É—Å—Ç–æ–µ –∏–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - —ç—Ç–æ –ø—Ä–∞–∫—Ç–∏–∫–∞
                            lesson_type = '–ü—Ä–∞–∫—Ç–∏–∫–∞'
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ –ø–æ–ª—è teacher
                        teacher = item.get('teacher', '')
                        
                        # –ï—Å–ª–∏ –ø–æ–ª–µ teacher –ø—É—Å—Ç–æ–µ, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ subject (fallback)
                        if not teacher:
                            if '–°–µ–º—ë–Ω–æ–≤' in subject:
                                teacher = '–°–µ–º—ë–Ω–æ–≤ –í.–ê.'
                            elif '–ò–≤–∞–Ω–æ–≤' in subject:
                                teacher = '–ò–≤–∞–Ω–æ–≤ –ò.–ò.'
                            elif '–õ—É–º–±—É–Ω–æ–≤–∞' in subject:
                                teacher = '–õ—É–º–±—É–Ω–æ–≤–∞ –ù.–ë.'
                            elif '–ò–∑–≤–µ–∫–æ–≤' in subject:
                                teacher = '–ò–∑–≤–µ–∫–æ–≤ –Ø.–û.'
                            elif '–¢—é—Ä—é—Ö–∞–Ω–æ–≤–∞' in subject:
                                teacher = '–¢—é—Ä—é—Ö–∞–Ω–æ–≤–∞ –ò.–í.'
                            elif '–ï–ª—Ç—É–Ω–æ–≤–∞' in subject:
                                teacher = '–ï–ª—Ç—É–Ω–æ–≤–∞ –ò.–ë.'
                            elif '–ë–µ–ª–æ—É—Å–æ–≤–∞' in subject:
                                teacher = '–ë–µ–ª–æ—É—Å–æ–≤–∞ –ú.–í.'
                            elif '–ü—Ä–æ—Ç–∞—Å–æ–≤' in subject:
                                teacher = '–ü—Ä–æ—Ç–∞—Å–æ–≤ –ê.–ï.'
                            elif '–£–±–µ–µ–≤' in subject:
                                teacher = '–£–±–µ–µ–≤ –ê.–ê.'
                            elif '–ñ–∞–º–±–∞–µ–≤' in subject:
                                teacher = '–ñ–∞–º–±–∞–µ–≤ –ë.–¶.'
                        
                        # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π
                        clean_subject = subject
                        
                        # –£–±–∏—Ä–∞–µ–º –¥–∞—Ç—É –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ –Ω–∞—á–∞–ª–∞ (—Ñ–æ—Ä–º–∞—Ç: "04.09.2025 –ß—Ç-2 | –û–° (–ü—Ä–∞–∫—Ç–∏—á.) 308 –°–µ–º—ë–Ω–æ–≤ –í.–ê.")
                        clean_subject = re.sub(r'^\d{2}\.\d{2}\.\d{4}\s+[–ê-–Ø–∞-—è]+-\d+\s*\|\s*', '', clean_subject)
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ (–ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –¥–æ —Å–∫–æ–±–∫–∏)
                        subject_parts = clean_subject.split('(')
                        if len(subject_parts) > 1:
                            subject_name = subject_parts[0].strip()
                            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —Å—Å—ã–ª–∫–∏
                            subject_name = re.sub(r'[|:]', '', subject_name).strip()
                            subject_name = re.sub(r'\s+', ' ', subject_name).strip()
                        else:
                            subject_name = clean_subject.strip()
                            # –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                            subject_name = re.sub(r'\s+', ' ', subject_name).strip()
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ
                        schedule_text += f"**{pair} –ø–∞—Ä–∞** {time}\n"
                        schedule_text += format_lesson_output(subject_name, lesson_type, room, teacher)
                        schedule_text += "\n\n"
                    
                    schedule_text += "üîó –ü–û–°–ú–û–¢–†–ï–¢–¨ –ö–ê–†–¢–û–ß–ö–£: https://biik.ru/rasp/cg389.htm\n"
                    
                except Exception as e:
                    schedule_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã: {e}"
                
                await message.answer(schedule_text, parse_mode="Markdown")
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–µ–µ
                available_dates = sorted(days.keys())
                if available_dates:
                    # –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é –¥–∞—Ç—É –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–π
                    target_date_obj = datetime.strptime(target_date_str, '%d.%m.%Y')
                    next_date = None
                    
                    for date_str in available_dates:
                        date_obj = datetime.strptime(date_str, '%d.%m.%Y')
                        if date_obj >= target_date_obj:
                            next_date = date_str
                            break
                    
                    if next_date:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –¥–∞—Ç—É
                        next_schedule_items = days[next_date]
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –±–ª–∏–∂–∞–π—à–µ–π –¥–∞—Ç—ã
                        next_date_obj = datetime.strptime(next_date, '%d.%m.%Y')
                        next_weekday = next_date_obj.strftime('%A').upper()
                        next_weekday_ru = {
                            'MONDAY': '–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö',
                            'TUESDAY': '–í–¢–û–†–ù–ò–ö', 
                            'WEDNESDAY': '–°–†–ï–î–ê',
                            'THURSDAY': '–ß–ï–¢–í–ï–†–ì',
                            'FRIDAY': '–ü–Ø–¢–ù–ò–¶–ê',
                            'SATURDAY': '–°–£–ë–ë–û–¢–ê',
                            'SUNDAY': '–í–û–°–ö–†–ï–°–ï–ù–¨–ï'
                        }.get(next_weekday, next_weekday)
                        
                        schedule_text = f"üì≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ {date_text} ({target_date_str}) –Ω–µ—Ç.\n\n"
                        schedule_text += f"üìÖ –ë–ª–∏–∂–∞–π—à–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {next_date} ({next_weekday_ru})\n\n"
                        
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ –Ω–æ–º–µ—Ä—É
                        sorted_items = sorted(next_schedule_items, key=lambda x: x.get('pair', 0))
                        
                        for item in sorted_items:
                            time = item.get('time', '')
                            subject = item.get('subject', '')
                            room = item.get('room', '')
                            kind = item.get('kind', '')
                            pair = item.get('pair', '')
                            teacher = item.get('teacher', '')
                            lesson_type = ''
                            
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è –ø–æ –ø–æ–ª—é kind
                            if kind == '–õ–µ–∫—Ü–∏—è':
                                lesson_type = '–õ–µ–∫—Ü–∏—è'
                            elif kind == '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è':
                                lesson_type = '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è'
                            elif kind == '–°–µ–º–∏–Ω–∞—Ä':
                                lesson_type = '–°–µ–º–∏–Ω–∞—Ä'
                            elif kind == '–ó–∞—á–µ—Ç':
                                lesson_type = '–ó–∞—á–µ—Ç'
                            else:
                                lesson_type = '–ü—Ä–∞–∫—Ç–∏–∫–∞'
                            
                            # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
                            clean_subject = subject
                            clean_subject = re.sub(r'^\d{2}\.\d{2}\.\d{4}\s+[–ê-–Ø–∞-—è]+-\d+\s*\|\s*', '', clean_subject)
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
                            subject_parts = clean_subject.split('(')
                            if len(subject_parts) > 1:
                                subject_name = subject_parts[0].strip()
                                subject_name = re.sub(r'[|:]', '', subject_name).strip()
                                subject_name = re.sub(r'\s+', ' ', subject_name).strip()
                            else:
                                subject_name = clean_subject.strip()
                                subject_name = re.sub(r'\s+', ' ', subject_name).strip()
                            
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ
                            schedule_text += f"**{pair} –ø–∞—Ä–∞** {time}\n"
                            schedule_text += format_lesson_output(subject_name, lesson_type, room, teacher)
                            schedule_text += "\n\n"
                        
                        schedule_text += "üîó –ü–û–°–ú–û–¢–†–ï–¢–¨ –ö–ê–†–¢–û–ß–ö–£: https://biik.ru/rasp/cg389.htm\n"
                        await message.answer(schedule_text, parse_mode="Markdown")
                    else:
                        await message.answer(f"üì≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ {date_text} ({target_date_str}) –Ω–µ—Ç.\n\n"
                                           f"üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã: {', '.join(available_dates)}\n"
                                           f"üîó https://biik.ru/rasp/cg389.htm")
                else:
                    await message.answer("üì≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –ø—Ä–æ–≥–æ–Ω —Å–∫—Ä–∞–ø–µ—Ä–∞.")
        else:
            await message.answer("üì≠ –î–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –ø—Ä–æ–≥–æ–Ω —Å–∫—Ä–∞–ø–µ—Ä–∞.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
@dp.message(Command("status"))
async def cmd_status(message: Message):
    allowed = await _check_and_increment_limit(message, limit=3)
    if not allowed:
        await message.reply("‚è≥ –õ–∏–º–∏—Ç 3 –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å—É—Ç–∫–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–∫—É ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.")
        return
    try:
        from db import list_versions
        items = list_versions(GROUP_CODE, 1)
        if items:
            status_text = f"‚úÖ –°–∫—Ä–∞–ø–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n"
            status_text += f"üìä –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {items[0].created_at.strftime('%d.%m.%Y %H:%M')}\n"
            status_text += f"üìÖ –ù–µ–¥–µ–ª—è: {items[0].week_start}\n"
            from json import loads
            status_text += f"üî¢ –ó–∞–ø–∏—Å–µ–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏: {len(loads(items[0].payload))}"
        else:
            status_text = "‚è≥ –°–∫—Ä–∞–ø–µ—Ä –∑–∞–ø—É—â–µ–Ω, –Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç"
        await message.answer(status_text)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def cmd_help(message: Message):
    # help –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
    help_text = (
        "ü§ñ **–ë–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è BIiK**\n\n"
        "**–ö–æ–º–∞–Ω–¥—ã:**\n"
        "‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "‚Ä¢ `/schedule` - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞\n"
        "‚Ä¢ `/date –î–î.–ú–ú.–ì–ì–ì–ì` - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É\n"
        "‚Ä¢ `/status` - –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∞–ø–µ—Ä–∞\n"
        "‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
        "‚Ä¢ `/schedule` - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–¥–æ 18:00) –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞ (–ø–æ—Å–ª–µ 18:00)\n"
        "‚Ä¢ `/date 04.09.2025` - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 4 —Å–µ–Ω—Ç—è–±—Ä—è 2025\n\n"
        "**–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**\n"
        "–ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.\n\n"
        "**–ì—Ä—É–ø–ø–∞:** cg389\n"
        "**–ò—Å—Ç–æ—á–Ω–∏–∫:** https://biik.ru/rasp/cg389.htm"
    )
    await message.answer(help_text, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /date –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
@dp.message(Command("date"))
async def cmd_date(message: Message):
    allowed = await _check_and_increment_limit(message, limit=3)
    if not allowed:
        await message.reply("‚è≥ –õ–∏–º–∏—Ç 3 –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å—É—Ç–∫–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–∫—É ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.")
        return
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç: /date 04.09.2025)
        text = message.text.strip()
        date_match = re.search(r'/date\s+(\d{2}\.\d{2}\.\d{4})', text)
        
        if not date_match:
            await message.answer("üìÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /date –î–î.–ú–ú.–ì–ì–ì–ì\n"
                               "–ü—Ä–∏–º–µ—Ä: /date 04.09.2025")
            return
        
        target_date_str = date_match.group(1)
        
        from db import list_versions
        from datetime import datetime
        items = list_versions(GROUP_CODE, 1)
        if items:
            from json import loads
            data = loads(items[0].payload)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
            from collections import defaultdict
            days = defaultdict(list)
            
            for item in data:
                subject = item.get('subject', '')
                date_match = re.search(r'(\d{2}\.\d{2}\.\d{4})', subject)
                if date_match:
                    date_str = date_match.group(1)
                    days[date_str].append(item)
            
            # –ò—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
            if target_date_str in days:
                schedule_items = days[target_date_str]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                try:
                    date_obj = datetime.strptime(target_date_str, '%d.%m.%Y')
                    weekday = date_obj.strftime('%A').upper()
                    weekday_ru = {
                        'MONDAY': '–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö',
                        'TUESDAY': '–í–¢–û–†–ù–ò–ö', 
                        'WEDNESDAY': '–°–†–ï–î–ê',
                        'THURSDAY': '–ß–ï–¢–í–ï–†–ì',
                        'FRIDAY': '–ü–Ø–¢–ù–ò–¶–ê',
                        'SATURDAY': '–°–£–ë–ë–û–¢–ê',
                        'SUNDAY': '–í–û–°–ö–†–ï–°–ï–ù–¨–ï'
                    }.get(weekday, weekday)
                    
                    schedule_text = f"üìÖ –†–ê–°–ü–ò–°–ê–ù–ò–ï –ù–ê {target_date_str}\n"
                    schedule_text += f"üóì {weekday_ru}\n\n"
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ –Ω–æ–º–µ—Ä—É
                    sorted_items = sorted(schedule_items, key=lambda x: x.get('pair', 0))
                    
                    for item in sorted_items:
                        time = item.get('time', '')
                        subject = item.get('subject', '')
                        room = item.get('room', '')
                        kind = item.get('kind', '')
                        pair = item.get('pair', '')
                        teacher = ''
                        lesson_type = ''
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è –ø–æ –ø–æ–ª—é kind
                        if kind == '–õ–µ–∫—Ü–∏—è':
                            lesson_type = '–õ–µ–∫—Ü–∏—è'
                        elif kind == '–õ–∞–±':
                            lesson_type = '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è'
                        elif kind == '–°–µ–º–∏–Ω–∞—Ä':
                            lesson_type = '–°–µ–º–∏–Ω–∞—Ä'
                        elif kind == '–ó–∞—á–µ—Ç':
                            lesson_type = '–ó–∞—á–µ—Ç'
                        else:
                            lesson_type = '–ü—Ä–∞–∫—Ç–∏–∫–∞'
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ –ø–æ–ª—è teacher
                        teacher = item.get('teacher', '')
                        
                        # –ï—Å–ª–∏ –ø–æ–ª–µ teacher –ø—É—Å—Ç–æ–µ, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ subject (fallback)
                        if not teacher:
                            if '–°–µ–º—ë–Ω–æ–≤' in subject:
                                teacher = '–°–µ–º—ë–Ω–æ–≤ –í.–ê.'
                            elif '–ò–≤–∞–Ω–æ–≤' in subject:
                                teacher = '–ò–≤–∞–Ω–æ–≤ –ò.–ò.'
                            elif '–õ—É–º–±—É–Ω–æ–≤–∞' in subject:
                                teacher = '–õ—É–º–±—É–Ω–æ–≤–∞ –ù.–ë.'
                            elif '–ò–∑–≤–µ–∫–æ–≤' in subject:
                                teacher = '–ò–∑–≤–µ–∫–æ–≤ –Ø.–û.'
                            elif '–¢—é—Ä—é—Ö–∞–Ω–æ–≤–∞' in subject:
                                teacher = '–¢—é—Ä—é—Ö–∞–Ω–æ–≤–∞ –ò.–í.'
                            elif '–ï–ª—Ç—É–Ω–æ–≤–∞' in subject:
                                teacher = '–ï–ª—Ç—É–Ω–æ–≤–∞ –ò.–ë.'
                            elif '–ë–µ–ª–æ—É—Å–æ–≤–∞' in subject:
                                teacher = '–ë–µ–ª–æ—É—Å–æ–≤–∞ –ú.–í.'
                            elif '–ü—Ä–æ—Ç–∞—Å–æ–≤' in subject:
                                teacher = '–ü—Ä–æ—Ç–∞—Å–æ–≤ –ê.–ï.'
                            elif '–£–±–µ–µ–≤' in subject:
                                teacher = '–£–±–µ–µ–≤ –ê.–ê.'
                            elif '–ñ–∞–º–±–∞–µ–≤' in subject:
                                teacher = '–ñ–∞–º–±–∞–µ–≤ –ë.–¶.'
                        
                        # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
                        clean_subject = subject
                        
                        # –£–±–∏—Ä–∞–µ–º –¥–∞—Ç—É –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ –Ω–∞—á–∞–ª–∞ (—Ñ–æ—Ä–º–∞—Ç: "04.09.2025 –ß—Ç-2 | –û–° (–ü—Ä–∞–∫—Ç–∏—á.) 308 –°–µ–º—ë–Ω–æ–≤ –í.–ê.)")
                        clean_subject = re.sub(r'^\d{2}\.\d{2}\.\d{4}\s+[–ê-–Ø–∞-—è]+-\d+\s*\|\s*', '', clean_subject)
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ (–ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –¥–æ —Å–∫–æ–±–∫–∏)
                        subject_parts = clean_subject.split('(')
                        if len(subject_parts) > 1:
                            subject_name = subject_parts[0].strip()
                            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —Å—Å—ã–ª–∫–∏
                            subject_name = re.sub(r'[|:]', '', subject_name).strip()
                            subject_name = re.sub(r'\s+', ' ', subject_name).strip()
                        else:
                            subject_name = clean_subject.strip()
                            # –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                            subject_name = re.sub(r'\s+', ' ', subject_name).strip()
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ
                        schedule_text += f"**{pair} –ø–∞—Ä–∞** {time}\n"
                        schedule_text += format_lesson_output(subject_name, lesson_type, room, teacher)
                        schedule_text += "\n\n"
                    
                    schedule_text += "üîó –ü–û–°–ú–û–¢–†–ï–¢–¨ –ö–ê–†–¢–û–ß–ö–£: https://biik.ru/rasp/cg389.htm\n"
                    
                except Exception as e:
                    schedule_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã: {e}"
                
                await message.answer(schedule_text, parse_mode="Markdown")
            else:
                await message.answer(f"üì≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ {target_date_str} –Ω–µ—Ç.\n\n"
                                   f"üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã: {', '.join(sorted(days.keys()))}\n"
                                   f"üîó https://biik.ru/rasp/cg389.htm")
        else:
            await message.answer("üì≠ –î–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –ø—Ä–æ–≥–æ–Ω —Å–∫—Ä–∞–ø–µ—Ä–∞.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")

async def notify_change(chat_id: int, text: str):
    await bot.send_message(chat_id, text, disable_web_page_preview=True)

async def notify_admin(text: str):
    if ADMIN_CHAT_IDS:
        for chat_id in ADMIN_CHAT_IDS:
            try:
                await notify_change(chat_id, text)
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")

async def close():
    await dp.stop_polling()
    await bot.session.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def start_bot():
    if not bot or not dp:
        print("‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω)")
        return
    try:
        # –£—Å—Ç–∞–Ω–æ–≤–∏–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ (–æ–±—â–∏–π scope)
        from aiogram.types import BotCommand
        await bot.set_my_commands([
            BotCommand(command="start", description="–ó–∞–ø—É—Å–∫"),
            BotCommand(command="schedule", description="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞"),
            BotCommand(command="date", description="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–∞—Ç—É"),
            BotCommand(command="status", description="–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"),
            BotCommand(command="help", description="–ü–æ–º–æ—â—å")
        ])
        await dp.start_polling(bot)
    except Exception as e:
        print(f"Bot error: {e}")
